# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.
# See https://tox.readthedocs.io/en/latest/config.html for reference.

[tox]

# Environments run by default and in this order
#  unless specified via CLI -eENVLIST
#  or environment variable TOXENV
envlist =
    clean
    # tests
    base
    visualization
    external
    petab
    mac
    # quality
    project
    flake8
    doc

# Base-environment

[testenv]

# Sub-environments
#  inherit settings defined in the base

[testenv:clean]
skip_install = true
allowlist_externals =
    rm
deps = coverage
commands =
    coverage erase
    rm -rf .coverage*
    rm -rf coverage.xml
    rm -rf dask-worker-space
description =
    Clean up before tests

# Unit tests

[testenv:base]
setenv =
    LD_LIBRARY_PATH = {env:LD_LIBRARY_PATH:/usr/lib}:/usr/local/lib/R/lib
extras = test,R,pyarrow,autograd
passenv = HOME
commands =
    # needed by pot
    pip install cython
    pip install pot
    pytest --cov=pyabc --cov-report=xml --cov-append \
        test/base test_performance -s
description =
    Test basic functionality

[testenv:visualization]
setenv =
    LD_LIBRARY_PATH = {env:LD_LIBRARY_PATH:/usr/lib}:/usr/local/lib/R/lib
extras = test,plotly,webserver_dash,webserver_flask
commands =
    pytest --cov=pyabc --cov-report=xml --cov-append \
        test/visualization
description =
    Test visualization

[testenv:external-R]
setenv =
    LD_LIBRARY_PATH = {env:LD_LIBRARY_PATH:/usr/lib}:/usr/local/lib/R/lib
extras = test,R
commands =
    # General
    pytest --cov=pyabc --cov-report=xml --cov-append \
        test/external/test_external.py -s
    # R
    pytest --cov=pyabc --cov-report=xml --cov-append \
        test/external/test_rpy2.py -s
description =
    Test external model simulators

[testenv:external-other-simulators]
extras = test,julia,copasi
commands =
    # Julia
    python -c "import julia; julia.install()"
    python -m pytest --cov=pyabc --cov-report=xml --cov-append \
        test/external/test_pyjulia.py -s
    # Copasi
    pytest --cov=pyabc --cov-report=xml --cov-append \
        test/copasi -s
description =
    Test external model simulators

[testenv:petab]
extras = test,petab,amici,test_petab
commands =
    # Petab
    python -m pytest --cov=pyabc --cov-report=xml --cov-append \
        test/petab -s
description =
    Test PEtab support

[testenv:mac]
extras = test
commands =
    pytest --cov=pyabc --cov-report=xml --cov-append \
        test/base/test_macos.py -s
description =
    Test basic macOS support (run there)

[testenv:migrate]
extras = test,migrate
deps =
    setuptools>=65.5.0
    wheel
    pytest-console-scripts
commands =
    pip install setuptools>=65.5.0 wheel  # to ensure distutils is there in python 3.12
    # install an old pyabc version
    pip install pyabc==0.10.13 numpy==1.23.5 pandas==1.5.0 sqlalchemy==1.4.48
    python test/migrate/create_test_db.py
    # back to latest pyabc version
    pip install --upgrade .
    pytest --cov=pyabc --cov-report=xml --cov-append \
        test/migrate -s
description =
    Test database migration

[testenv:notebooks1]
allowlist_externals = bash
extras = examples
commands =
    # needed by pot
    pip install cython
    pip install pot
    bash test/run_notebooks.sh 1
description =
    Run notebooks

[testenv:notebooks2]
setenv =
    LD_LIBRARY_PATH = {env:LD_LIBRARY_PATH:/usr/lib}:/usr/local/lib/R/lib
allowlist_externals = bash
extras = examples,R,petab,yaml2sbml,amici,autograd
commands =
    bash test/run_notebooks.sh 2
description =
    Run notebooks

# Style, management, docs

[testenv:project]
skip_install = true
deps =
    pyroma
    restructuredtext-lint
commands =
    pyroma --min=10 .
description =
    Check the package friendliness

[testenv:flake8]
skip_install = true
deps =
    black >= 22.3.0
    flake8 >= 3.8.3
    flake8-bandit >= 4.1.1
    flake8-bugbear >= 22.8.23
    flake8-colors >= 0.1.6
    #flake8-commas >= 2.0.0
    flake8-comprehensions >= 3.2.3
    flake8-print >= 5.0.0
    flake8-black >= 0.2.3
    flake8-isort >= 4.0.0
    # flake8-docstrings >= 1.5.0
commands =
    flake8 pyabc test test_performance setup.py
description =
    Run flake8 with various plugins

[testenv:doc]
extras =
    doc,petab,plotly
commands =
    sphinx-build -W -b html doc/ doc/_build/html
description =
    Test whether docs build passes
